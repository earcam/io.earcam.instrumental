#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')


Consists of:

* A self-first `URLClassLoader`
* An in-memory `ClassLoader`
* The usual exposure of [defineClass()][classloader-defineclass]
* Static utility to execute a `Runnable` within a thread's context `ClassLoader` 


The `${project.artifactId}.InMemoryClassLoader`: 

* Briefly employs the builder pattern to add class and resources
* Loading strategy is *self-first* 
* Load JARs from `byte` arrays and `InputStream`s
* Is parallel capable and registered as such
* `URL`s provide valid streams; either using the instance or, if serializing, once the `URLStreamHandler` is registered
* Basic support for signed content; `CodeSigners` associated with loaded classes, but currently archives *not* verified
* Works as the ClassLoader for:
    * Vanilla Java
    * JPMS (also supports dynamic layers with custom ModuleFinder)
    * the JVM System ClassLoader (["java.system.class.loader"][system-classloader]) 
    * [Felix Connect][felix-connect] (formerly known as PojoSR) 
    * [Multi-Release JARs][mr-jar] (can explicitly force a version to use)

[classloader-defineclass]: https://docs.oracle.com/javase/10/docs/api/java/lang/ClassLoader.html#defineClass(byte[],int,int)
[system-classloader]: https://docs.oracle.com/javase/10/docs/api/java/lang/ClassLoader.html#getSystemClassLoader()
[felix-connect]: [https://github.com/apache/felix/tree/trunk/connect]
[mr-jar]: [https://openjdk.java.net/jeps/238]
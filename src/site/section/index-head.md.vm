#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
#set($h5 = '#####')
#set($h6 = '######')

In-memory/on-disk support for compilation and archiving, power-proxing and dynamic instrumentation, supporting JDKs 8, 9 and 10.

You could:

* Compile from a string, with dependencies from Maven artifact coordinates, stuffed into a signed, in-memory, multi-release JAR, complete 
with annotations processed, performing bytecode class transformation, an OSGi bundle manifest and a JPMS module-info, then load into current. 
runtime or publish to a maven repo... 
* Attach a JavaAgent to a JUnit test without modifying the JVM start-up parameters (i.e. out-of-the-box IDE support)
* Proxy concrete classes with convenience of vanilla `InvocationHandler`s
 
$h5 Tests as Examples and Examples as Documentation

At this initial stage the aim is to prove minimal documentation through examples extracted from tests.  Currently some modules have no 
documentation; these are typically of limited value to the end user. See the [module list]($escape.getHash()Module_List).

A ridiculous [Hello World example](/ridiculous_example.html) demonstrates the use of multiple modules; it creates 3 interdependent JARs, 
and then executes as OSGi, JPMS and vanilla Java applications, entirely in-memory. A smaller example of just dynamic in-memory JPMS
can be found in [lade.jpms](/lade.jpms/#Examples).

Otherwise, a sensible place to start is [instrumental.archive](/archive), which lists the various extension modules, each of
which has a brief example.



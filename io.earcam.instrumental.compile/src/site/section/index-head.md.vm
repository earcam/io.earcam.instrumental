#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')

`${project.artifactId}.Compiler`

* Convenience functionality on top of `javax.tools.JavaCompiler` (Can therefore use OpenJDK/Oracle/Azul/OpenJ9 and Eclipse compilers)  
* Compile to/from the file-system, or entirely in-memory (e.g. from source as `String` to class as `byte` array)  
* Fluid builder with specific support for [annotation processors][annotation-processor]
* Create native headers
* Helper methods to find sourcecode for classes within maven project or maven dependencies (on proviso that source jar has been downloaded)

Provides a complete in-memory _experience_:

* Can be integrated with [instrumental.archive][instrumental-archive], via [instrumental.compile.glue][instrumental-compile-glue], such that compiler 
output is added to the archive
* By using [instrumental.archive.glue][instrumental-archive-glue] in-memory archives may be used as the source of compiler dependencies


**Note**: currently the Eclipse compiler only supports input from the filesystem.


[instrumental-archive]: /archive
[instrumental-compile-glue]: /compile.glue
[instrumental-archive-glue]: /archive.glue
[annotation-processor]: https://docs.oracle.com/javase/${version.java.platform}/docs/api/javax/annotation/processing/Processor.html
